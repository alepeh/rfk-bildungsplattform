# Generated by Django 5.0 on 2025-09-27 11:43

from django.db import migrations
from django.utils import timezone


def activate_existing_users(apps, schema_editor):
    """
    Activate all existing users when rolling out the admin approval feature.
    This ensures that existing users aren't locked out when the new approval workflow is deployed.
    """
    Person = apps.get_model("core", "Person")

    # Get all existing Person records
    existing_persons = Person.objects.all()

    activation_time = timezone.now()
    updated_count = 0

    for person in existing_persons:
        # Only update persons that are not already activated
        if not person.is_activated:
            person.is_activated = True
            person.activated_at = activation_time
            # Note: We can't set activated_by since we don't have a specific admin user
            # This will be None for the initial activation
            person.save()
            updated_count += 1

        # Also ensure the related User account is active
        if person.benutzer and not person.benutzer.is_active:
            person.benutzer.is_active = True
            person.benutzer.save()

    print(f"Activated {updated_count} existing Person records")


def reverse_activate_existing_users(apps, schema_editor):
    """
    Reverse migration - set all existing users back to inactive.
    Note: This is a destructive operation and should be used with caution.
    """
    Person = apps.get_model("core", "Person")

    # Reset activation status for all persons
    Person.objects.update(is_activated=False, activated_at=None, activated_by=None)

    print("Deactivated all existing Person records")


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0045_bestellung_rechnungsadresse_name_and_more"),
    ]

    operations = [
        migrations.RunPython(
            activate_existing_users,
            reverse_activate_existing_users,
        ),
    ]
